const { Pool } = require('pg')

const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'whatsapp_system',
  password: 'Nitin@123',
  port: 5432,
})

async function testVouchersFrontendAPI() {
  try {
    console.log('üß™ Testing Vouchers Frontend API Integration...\n')
    
    // Test 1: Check if vouchers API returns correct data structure
    console.log('1Ô∏è‚É£ Testing API data structure...')
    
    // Simulate what the frontend API should return
    const apiQuery = `
      SELECT 
        id, code, description, type, value, usage_limit, usage_count,
        is_active, expires_at, created_by, created_at, updated_at,
        package_id, min_purchase_amount, max_discount_amount,
        CASE 
          WHEN expires_at < CURRENT_TIMESTAMP THEN 'Expired'
          WHEN is_active = false THEN 'Paused'
          ELSE 'Active'
        END as status
      FROM vouchers
      WHERE 1=1
      ORDER BY created_at DESC
    `
    
    const vouchers = await pool.query(apiQuery)
    
    // Simulate stats calculation
    const statsQuery = `
      SELECT 
        COUNT(*) as total_vouchers,
        COUNT(CASE WHEN is_active = true AND (expires_at IS NULL OR expires_at > CURRENT_TIMESTAMP) THEN 1 END) as active_vouchers,
        SUM(usage_count) as total_usage,
        SUM(CASE WHEN type = 'credit' THEN value * usage_count ELSE 0 END) as credit_value_used
      FROM vouchers
    `
    
    const stats = await pool.query(statsQuery)
    
    console.log('üìä API Response Structure:')
    console.log(`   Vouchers Array Length: ${vouchers.rows.length}`)
    console.log(`   Sample Voucher Fields: ${Object.keys(vouchers.rows[0] || {}).join(', ')}`)
    
    const statsData = stats.rows[0]
    console.log('üìà Stats Object:')
    console.log(`   totalVouchers: ${statsData.total_vouchers}`)
    console.log(`   activeVouchers: ${statsData.active_vouchers}`)
    console.log(`   totalUsage: ${statsData.total_usage}`)
    console.log(`   creditValueUsed: ${parseFloat(statsData.credit_value_used || 0).toFixed(2)}`)
    
    // Test 2: Test search functionality
    console.log('\n2Ô∏è‚É£ Testing search functionality...')
    
    const searchQuery = `
      SELECT 
        id, code, description, type, value, usage_limit, usage_count,
        is_active, expires_at, created_by, created_at, updated_at,
        CASE 
          WHEN expires_at < CURRENT_TIMESTAMP THEN 'Expired'
          WHEN is_active = false THEN 'Paused'
          ELSE 'Active'
        END as status
      FROM vouchers
      WHERE (code ILIKE $1 OR description ILIKE $1)
      ORDER BY created_at DESC
    `
    
    const searchResults = await pool.query(searchQuery, ['%WELCOME%'])
    console.log(`üîç Search Results for 'WELCOME': ${searchResults.rows.length} vouchers`)
    
    // Test 3: Test status filter
    console.log('\n3Ô∏è‚É£ Testing status filters...')
    
    const activeFilter = `
      SELECT COUNT(*) as count FROM vouchers
      WHERE is_active = true AND (expires_at IS NULL OR expires_at > CURRENT_TIMESTAMP)
    `
    
    const expiredFilter = `
      SELECT COUNT(*) as count FROM vouchers
      WHERE expires_at < CURRENT_TIMESTAMP
    `
    
    const pausedFilter = `
      SELECT COUNT(*) as count FROM vouchers
      WHERE is_active = false
    `
    
    const activeCount = await pool.query(activeFilter)
    const expiredCount = await pool.query(expiredFilter)
    const pausedCount = await pool.query(pausedFilter)
    
    console.log(`‚úÖ Active vouchers: ${activeCount.rows[0].count}`)
    console.log(`‚è∞ Expired vouchers: ${expiredCount.rows[0].count}`)
    console.log(`‚è∏Ô∏è  Paused vouchers: ${pausedCount.rows[0].count}`)
    
    // Test 4: Test type filter
    console.log('\n4Ô∏è‚É£ Testing type filters...')
    
    const typeStats = await pool.query(`
      SELECT type, COUNT(*) as count
      FROM vouchers
      GROUP BY type
      ORDER BY count DESC
    `)
    
    console.log('üè∑Ô∏è  Vouchers by type:')
    typeStats.rows.forEach(type => {
      console.log(`   ${type.type}: ${type.count}`)
    })
    
    // Test 5: Test voucher creation data structure
    console.log('\n5Ô∏è‚É£ Testing voucher creation...')
    
    const testVoucherId = `TEST_API_${Date.now()}`
    
    const createQuery = `
      INSERT INTO vouchers (
        code, description, type, value, usage_limit, expires_at,
        package_id, min_purchase_amount, max_discount_amount, created_by
      )
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
      RETURNING *
    `
    
    const createdVoucher = await pool.query(createQuery, [
      testVoucherId,
      'Test API voucher for frontend',
      'credit',
      50.00,
      10,
      new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
      null,
      null,
      null,
      'API_TEST'
    ])
    
    console.log('‚úÖ Test voucher created successfully')
    console.log(`   ID: ${createdVoucher.rows[0].id}`)
    console.log(`   Code: ${createdVoucher.rows[0].code}`)
    console.log(`   Type: ${createdVoucher.rows[0].type}`)
    console.log(`   Value: ${createdVoucher.rows[0].value}`)
    
    // Test 6: Test voucher update
    console.log('\n6Ô∏è‚É£ Testing voucher update...')
    
    const updateQuery = `
      UPDATE vouchers 
      SET description = $1, value = $2, updated_at = CURRENT_TIMESTAMP
      WHERE id = $3
      RETURNING *
    `
    
    const updatedVoucher = await pool.query(updateQuery, [
      'Updated test voucher description',
      75.00,
      createdVoucher.rows[0].id
    ])
    
    console.log('‚úÖ Test voucher updated successfully')
    console.log(`   New Description: ${updatedVoucher.rows[0].description}`)
    console.log(`   New Value: ${updatedVoucher.rows[0].value}`)
    
    // Test 7: Test voucher deletion/deactivation
    console.log('\n7Ô∏è‚É£ Testing voucher deactivation...')
    
    // Check if voucher has usage
    const usageCheck = await pool.query(
      'SELECT COUNT(*) as count FROM voucher_usage WHERE voucher_id = $1',
      [createdVoucher.rows[0].id]
    )
    
    if (parseInt(usageCheck.rows[0].count) === 0) {
      // Hard delete if no usage
      await pool.query('DELETE FROM vouchers WHERE id = $1', [createdVoucher.rows[0].id])
      console.log('‚úÖ Test voucher deleted (no usage history)')
    } else {
      // Soft delete if has usage
      await pool.query(
        'UPDATE vouchers SET is_active = false WHERE id = $1',
        [createdVoucher.rows[0].id]
      )
      console.log('‚úÖ Test voucher deactivated (has usage history)')
    }
    
    // Test 8: Frontend compatibility check
    console.log('\n8Ô∏è‚É£ Frontend compatibility check...')
    
    const frontendQuery = `
      SELECT 
        id, code, description, type, value, usage_limit, usage_count,
        is_active, expires_at, created_by, created_at, updated_at,
        package_id, min_purchase_amount, max_discount_amount,
        CASE 
          WHEN expires_at < CURRENT_TIMESTAMP THEN 'Expired'
          WHEN is_active = false THEN 'Paused'
          ELSE 'Active'
        END as status
      FROM vouchers
      ORDER BY created_at DESC
      LIMIT 1
    `
    
    const frontendSample = await pool.query(frontendQuery)
    
    if (frontendSample.rows.length > 0) {
      const sample = frontendSample.rows[0]
      console.log('üì± Frontend Data Sample:')
      console.log(`{`)
      console.log(`  id: ${sample.id},`)
      console.log(`  code: "${sample.code}",`)
      console.log(`  description: "${sample.description || 'null'}",`)
      console.log(`  type: "${sample.type}",`)
      console.log(`  value: ${sample.value},`)
      console.log(`  usage_limit: ${sample.usage_limit || 'null'},`)
      console.log(`  usage_count: ${sample.usage_count},`)
      console.log(`  is_active: ${sample.is_active},`)
      console.log(`  expires_at: "${sample.expires_at || 'null'}",`)
      console.log(`  status: "${sample.status}"`)
      console.log(`}`)
    }
    
    console.log('\nüéâ Frontend API Integration Test Completed!')
    console.log('üìã Summary:')
    console.log('   ‚úÖ Data structure compatible with frontend')
    console.log('   ‚úÖ Search functionality working')
    console.log('   ‚úÖ Status filters operational')
    console.log('   ‚úÖ Type filters functional')
    console.log('   ‚úÖ CRUD operations successful')
    console.log('   ‚úÖ Statistics calculation accurate')
    console.log('   ‚úÖ Frontend ready for real database integration')
    
  } catch (error) {
    console.error('‚ùå Error testing frontend API:', error.message)
    console.error('Stack:', error.stack)
  } finally {
    pool.end()
  }
}

testVouchersFrontendAPI()