'use client'

import { useState, useEffect } from 'react'
import {
  Container,
  Title,
  Text,
  Card,
  Stack,
  Group,
  Button,
  TextInput,
  Alert,
  Code,
  Badge,
  Tabs,
  Image,
  Progress,
  ActionIcon,
  ScrollArea,
  Divider,
  Grid,
  Center,
  LoadingOverlay,
  Select,
  Textarea
} from '@mantine/core'
import {
  IconServer,
  IconBrandWhatsapp,
  IconQrcode,
  IconRefresh,
  IconTrash,
  IconPlus,
  IconCheck,
  IconX,
  IconCopy,
  IconEye,
  IconPlay,
  IconSettings,
  IconPlayerPlay,
  IconScan,
  IconWifiOff,
  IconMessage,
  IconSend,
  IconPhone,
  IconPhoto,
  IconFile,
  IconVideo,
  IconMusic,
  IconMapPin,
  IconUpload,
  IconLink
} from '@tabler/icons-react'
import { notifications } from '@mantine/notifications'
import WhatsAppQRModal from '@/components/qr/WhatsAppQRModal'

interface TestResult {
  success: boolean
  status?: number
  data?: any
  error?: string
  timestamp: string
  accountId?: string
  hasQR?: boolean
}

interface TestAccount {
  id: string
  name: string
  status: string
  created: string
  lastTested?: string
  qrCode?: string
  qrGeneratedAt?: string
  qrAge?: number
  isAutoGenerated?: boolean
  isPersistent?: boolean
  deviceInfo?: {
    connectedAt?: string
    lastSeen?: string
    phoneNumber?: string
  }
}

export default function WhatsAppAPITestPage() {
  const [loading, setLoading] = useState(false)
  const [serverStatus, setServerStatus] = useState<TestResult | null>(null)
  const [testResults, setTestResults] = useState<Record<string, TestResult>>({})
  const [testAccounts, setTestAccounts] = useState<TestAccount[]>([])
  const [newAccountName, setNewAccountName] = useState('')
  const [autoRefresh, setAutoRefresh] = useState(false)
  const [qrModalOpen, setQrModalOpen] = useState(false)
  const [selectedQRAccount, setSelectedQRAccount] = useState<TestAccount | null>(null)
  const [isClient, setIsClient] = useState(false)
  const [qrTimers, setQrTimers] = useState<Record<string, number>>({})
  
  // Message testing state
  const [selectedAccount, setSelectedAccount] = useState('')
  const [recipientNumber, setRecipientNumber] = useState('')
  const [messageText, setMessageText] = useState('')
  const [messageSending, setMessageSending] = useState(false)
  
  // Attachment testing state
  const [messageType, setMessageType] = useState('text')
  const [imageUrl, setImageUrl] = useState('')
  const [imageCaption, setImageCaption] = useState('')
  const [documentUrl, setDocumentUrl] = useState('')
  const [documentFilename, setDocumentFilename] = useState('')
  const [documentCaption, setDocumentCaption] = useState('')
  const [videoUrl, setVideoUrl] = useState('')
  const [videoCaption, setVideoCaption] = useState('')
  const [audioUrl, setAudioUrl] = useState('')
  const [locationLat, setLocationLat] = useState('')
  const [locationLon, setLocationLon] = useState('')
  const [locationName, setLocationName] = useState('')
  const [locationAddress, setLocationAddress] = useState('')

  useEffect(() => {
    // Mark as client-side to prevent hydration mismatch
    setIsClient(true)
    
    // Load test accounts from localStorage
    const savedAccounts = localStorage.getItem('whatsapp-test-accounts')
    if (savedAccounts) {
      setTestAccounts(JSON.parse(savedAccounts))
    }
    
    // Initial server health check and load accounts
    testServerHealth()
    testAccountsList()
  }, [])

  useEffect(() => {
    // Auto-refresh interval with more frequent status updates
    let interval: NodeJS.Timeout | null = null
    if (autoRefresh) {
      interval = setInterval(() => {
        // Refresh accounts status more frequently to detect connections quickly
        refreshAllAccounts()
        testAccountsList()
        
        // Health check less frequently
        if (Date.now() % 15000 < 5000) { // Every 15 seconds
          testServerHealth()
        }
      }, 3000) // Reduced to 3 seconds for faster connection detection
    }
    return () => {
      if (interval) clearInterval(interval)
    }
  }, [autoRefresh, testAccounts])

  // QR Timer update effect
  useEffect(() => {
    const interval = setInterval(() => {
      setTestAccounts(prevAccounts => 
        prevAccounts.map(account => {
          if (account.qrCode && account.qrGeneratedAt) {
            const now = Date.now()
            const generatedAt = new Date(account.qrGeneratedAt).getTime()
            const ageInSeconds = Math.floor((now - generatedAt) / 1000)
            return { ...account, qrAge: ageInSeconds }
          }
          return account
        })
      )
    }, 1000) // Update every second

    return () => clearInterval(interval)
  }, [testAccounts])

  const saveTestAccounts = (accounts: TestAccount[]) => {
    setTestAccounts(accounts)
    localStorage.setItem('whatsapp-test-accounts', JSON.stringify(accounts))
  }

  const testAPI = async (endpoint: string, method = 'GET', body?: any): Promise<TestResult> => {
    try {
      const options: RequestInit = {
        method,
        headers: { 'Content-Type': 'application/json' }
      }
      if (body) options.body = JSON.stringify(body)

      const response = await fetch(`/api/debug/whatsapp${endpoint}`, options)
      const result = await response.json()
      
      return result
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        timestamp: new Date().toISOString()
      }
    }
  }

  const testServerHealth = async () => {
    setLoading(true)
    const result = await testAPI('?action=health')
    setServerStatus(result)
    setTestResults(prev => ({ ...prev, health: result }))
    setLoading(false)
  }

  const testServerStats = async () => {
    const result = await testAPI('?action=stats')
    setTestResults(prev => ({ ...prev, stats: result }))
  }

  const testAccountsList = async () => {
    const result = await testAPI('?action=accounts')
    setTestResults(prev => ({ ...prev, accounts: result }))
    
    // Parse accounts from Baileys server response
    if (result.success && result.data?.data?.accounts) {
      const serverAccounts = result.data.data.accounts.map((acc: any) => ({
        id: acc.id,
        name: acc.userName || acc.id, // Use detected username or ID as fallback
        status: acc.status,
        created: new Date().toISOString(),
        lastTested: new Date().toISOString(),
        qrCode: acc.qrCode,
        // Include auto-detected device information
        deviceInfo: acc.deviceInfo ? {
          connectedAt: acc.deviceInfo.connectedAt,
          lastSeen: acc.deviceInfo.lastSeen,
          phoneNumber: acc.deviceInfo.phoneNumber,
          userName: acc.deviceInfo.userName,
          deviceId: acc.deviceInfo.deviceId,
          platform: acc.deviceInfo.platform
        } : undefined
      }))
      
      // Merge with existing test accounts, preserving local data but updating server data
      const existingAccounts = testAccounts.filter(acc => 
        !serverAccounts.some(serverAcc => serverAcc.id === acc.id)
      )
      
      // Update existing accounts with server data
      const updatedExistingAccounts = testAccounts.map(localAcc => {
        const serverAcc = serverAccounts.find(servAcc => servAcc.id === localAcc.id)
        if (serverAcc) {
          return {
            ...localAcc, // Keep local properties (name, isAutoGenerated, etc.)
            status: serverAcc.status, // Update status from server
            lastTested: serverAcc.lastTested,
            qrCode: serverAcc.qrCode,
            deviceInfo: serverAcc.deviceInfo || localAcc.deviceInfo // Use server deviceInfo if available
          }
        }
        return localAcc
      })
      
      const newServerAccounts = serverAccounts.filter(serverAcc => 
        !testAccounts.some(localAcc => localAcc.id === serverAcc.id)
      )
      
      const allAccounts = [...updatedExistingAccounts, ...newServerAccounts]
      saveTestAccounts(allAccounts)
    }
  }

  // Auto-generate friendly device names
  const generateDeviceName = (): string => {
    // Only generate on client side to prevent hydration mismatch
    if (!isClient) {
      return 'Device Loading...'
    }
    
    const adjectives = ['Quick', 'Smart', 'Bright', 'Swift', 'Cool', 'Fast', 'Sharp', 'Sleek', 'Bold', 'Prime']
    const nouns = ['Phone', 'Device', 'Mobile', 'Scanner', 'Client', 'Terminal', 'Station', 'Unit', 'Hub', 'Node']
    const adj = adjectives[Math.floor(Math.random() * adjectives.length)]
    const noun = nouns[Math.floor(Math.random() * nouns.length)]
    const timestamp = Date.now().toString().slice(-4)
    return `${adj} ${noun} ${timestamp}`
  }

  // Create account with auto-generated name or user input
  const createTestAccount = async (autoGenerate = false) => {
    // Ensure client is ready for auto-generation
    if (autoGenerate && !isClient) {
      notifications.show({
        title: 'Please Wait',
        message: 'Loading...',
        color: 'blue'
      })
      return
    }
    
    let accountName = newAccountName.trim()
    
    if (autoGenerate) {
      accountName = generateDeviceName()
    } else if (!accountName) {
      notifications.show({
        title: 'Error',
        message: 'Please enter an account name',
        color: 'red'
      })
      return
    }

    const accountId = `device_${Date.now()}_${Math.random().toString(36).substring(7)}`
    const result = await testAPI('', 'POST', {
      action: 'connect',
      accountId,
      accountName: accountName
    })

    if (result.success) {
      const newAccount: TestAccount = {
        id: accountId,
        name: accountName,
        status: result.data?.data?.status || 'connecting',
        created: new Date().toISOString(),
        lastTested: new Date().toISOString(),
        isAutoGenerated: autoGenerate,
        isPersistent: true // Mark as persistent session
      }
      
      const updatedAccounts = [...testAccounts, newAccount]
      saveTestAccounts(updatedAccounts)
      
      if (!autoGenerate) {
        setNewAccountName('')
      }
      
      notifications.show({
        title: 'Success',
        message: `${autoGenerate ? 'Auto-generated device' : 'Test account'} "${accountName}" created`,
        color: 'green'
      })

      // Don't automatically generate QR code - wait for manual trigger
    } else {
      // Enhanced error messages with troubleshooting tips
      let errorMessage = result.error || 'Failed to create test account'
      let errorTitle = 'Error'
      
      if (result.error?.includes('Rate limited')) {
        errorTitle = '⏰ Rate Limited'
        errorMessage = result.error + '\n\nTip: Wait between connection attempts to avoid WhatsApp rate limiting.'
      } else if (result.error?.includes('428')) {
        errorTitle = '🚫 WhatsApp Rate Limit (Error 428)'
        errorMessage = 'WhatsApp is temporarily blocking connections. Wait 15-30 minutes before trying again.'
      } else if (result.error?.includes('already exists')) {
        errorTitle = '⚠️ Account Exists'
        errorMessage = 'Account already exists. Try disconnecting first or use a different name.'
      }
      
      notifications.show({
        title: errorTitle,
        message: errorMessage,
        color: 'red',
        autoClose: 8000 // Longer display for troubleshooting tips
      })
    }

    setTestResults(prev => ({ ...prev, [`connect_${accountId}`]: result }))
  }

  const getAccountStatus = async (accountId: string) => {
    const result = await testAPI(`?action=status&accountId=${accountId}`)
    setTestResults(prev => ({ ...prev, [`status_${accountId}`]: result }))
    
    if (result.success && result.data?.data) {
      const accountData = result.data.data
      const updatedAccounts = testAccounts.map(acc => {
        if (acc.id === accountId) {
          const updates: Partial<TestAccount> = {
            status: accountData.status,
            lastTested: new Date().toISOString()
          }
          
          // Detect device connection and auto-detected information
          if (accountData.status === 'connected' && acc.status !== 'connected') {
            // Use server-provided device info if available, otherwise create basic info
            updates.deviceInfo = accountData.deviceInfo ? {
              connectedAt: accountData.deviceInfo.connectedAt || new Date().toISOString(),
              lastSeen: accountData.deviceInfo.lastSeen || new Date().toISOString(),
              phoneNumber: accountData.deviceInfo.phoneNumber,
              userName: accountData.deviceInfo.userName,
              deviceId: accountData.deviceInfo.deviceId,
              platform: accountData.deviceInfo.platform || 'mobile'
            } : {
              connectedAt: new Date().toISOString(),
              lastSeen: new Date().toISOString(),
              phoneNumber: accountData.phoneNumber
            }
            
            // Show connection notification with auto-detected info
            const phoneNumber = updates.deviceInfo?.phoneNumber
            const userName = updates.deviceInfo?.userName
            notifications.show({
              title: '📱 Device Connected!',
              message: `${acc.name} is now linked${phoneNumber ? ` to ${phoneNumber}` : ''}${userName ? ` (${userName})` : ''} and ready to use`,
              color: 'green',
              autoClose: 7000
            })
          }
          
          // Update last seen for connected devices
          if (accountData.status === 'connected' && acc.deviceInfo) {
            updates.deviceInfo = {
              ...acc.deviceInfo,
              lastSeen: new Date().toISOString()
            }
          }
          
          return { ...acc, ...updates }
        }
        return acc
      })
      saveTestAccounts(updatedAccounts)
    }
  }

  const getQRCode = async (accountId: string, showModal = false) => {
    const result = await testAPI(`?action=qr&accountId=${accountId}`)
    setTestResults(prev => ({ ...prev, [`qr_${accountId}`]: result }))
    
    // Handle different QR code response formats - check nested structure from Baileys
    const qrCode = result.qrCode || result.data?.data?.qrCode || result.data?.qrCode || result.data?.data?.qr
    
    if (result.success && qrCode) {
      const now = new Date().toISOString()
      const updatedAccounts = testAccounts.map(acc => 
        acc.id === accountId 
          ? { 
              ...acc, 
              qrCode: qrCode, 
              qrGeneratedAt: now,
              qrAge: 0,
              lastTested: now 
            }
          : acc
      )
      saveTestAccounts(updatedAccounts)
      
      // Find the account for modal display
      const account = updatedAccounts.find(acc => acc.id === accountId)
      
      // Show modal only if requested
      if (showModal && account && account.qrCode) {
        setTimeout(() => {
          setSelectedQRAccount(account)
          setQrModalOpen(true)
        }, 100)
      }
      
      notifications.show({
        title: '🆕 Fresh QR Code Generated!',
        message: `New QR code ready for ${account?.name || 'account'} - 20 minutes validity`,
        color: 'green'
      })
    } else {
      notifications.show({
        title: 'QR Code Not Ready',
        message: 'QR code is still generating. Try refreshing in a few seconds.',
        color: 'yellow'
      })
    }
  }

  const disconnectAccount = async (accountId: string, removeSession: boolean = false) => {
    const account = testAccounts.find(acc => acc.id === accountId)
    
    const result = await testAPI('', 'POST', {
      action: 'disconnect',
      accountId
    })

    if (result.success) {
      if (removeSession || !account?.isPersistent) {
        // Remove completely if not persistent or explicitly requested
        const updatedAccounts = testAccounts.filter(acc => acc.id !== accountId)
        saveTestAccounts(updatedAccounts)
        
        notifications.show({
          title: 'Success',
          message: 'Account disconnected and removed',
          color: 'green'
        })
      } else {
        // Keep persistent sessions but mark as disconnected
        const updatedAccounts = testAccounts.map(acc => 
          acc.id === accountId 
            ? { 
                ...acc, 
                status: 'disconnected',
                lastTested: new Date().toISOString(),
                qrCode: undefined,
                deviceInfo: acc.deviceInfo ? {
                  ...acc.deviceInfo,
                  lastSeen: new Date().toISOString()
                } : undefined
              }
            : acc
        )
        saveTestAccounts(updatedAccounts)
        
        notifications.show({
          title: 'Device Disconnected',
          message: `${account?.name} disconnected but session preserved for reconnection`,
          color: 'blue'
        })
      }
    } else {
      notifications.show({
        title: 'Error',
        message: result.error || 'Failed to disconnect account',
        color: 'red'
      })
    }

    setTestResults(prev => ({ ...prev, [`disconnect_${accountId}`]: result }))
  }

  const refreshAllAccounts = async () => {
    for (const account of testAccounts) {
      await getAccountStatus(account.id)
    }
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
    notifications.show({
      title: 'Copied',
      message: 'Text copied to clipboard',
      color: 'blue'
    })
  }

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'connected': return 'green'
      case 'connecting': return 'yellow'
      case 'authenticating': return 'blue'
      case 'disconnected': return 'gray'
      case 'error': return 'red'
      default: return 'gray'
    }
  }

  const formatQRAge = (ageInSeconds: number) => {
    if (ageInSeconds < 60) {
      return `${ageInSeconds}s ago`
    } else if (ageInSeconds < 3600) {
      const minutes = Math.floor(ageInSeconds / 60)
      return `${minutes}m ago`
    } else {
      const hours = Math.floor(ageInSeconds / 3600)
      return `${hours}h ago`
    }
  }

  const getQRFreshness = (ageInSeconds: number) => {
    if (ageInSeconds < 30) return { color: 'green', label: 'Fresh' }
    if (ageInSeconds < 300) return { color: 'yellow', label: 'Recent' }
    if (ageInSeconds < 1200) return { color: 'orange', label: 'Valid' }
    return { color: 'red', label: 'Expired' }
  }

  // Message sending function with attachment support
  const sendTestMessage = async () => {
    // Validation based on message type
    if (!selectedAccount || !recipientNumber) {
      notifications.show({
        title: 'Missing Information',
        message: 'Please select an account and enter recipient number',
        color: 'red'
      })
      return
    }

    // Type-specific validation
    if (messageType === 'text' && !messageText) {
      notifications.show({
        title: 'Missing Message Text',
        message: 'Please enter message text',
        color: 'red'
      })
      return
    }

    if (messageType === 'image' && !imageUrl) {
      notifications.show({
        title: 'Missing Image URL',
        message: 'Please enter image URL',
        color: 'red'
      })
      return
    }

    if (messageType === 'document' && (!documentUrl || !documentFilename)) {
      notifications.show({
        title: 'Missing Document Info',
        message: 'Please enter document URL and filename',
        color: 'red'
      })
      return
    }

    if (messageType === 'video' && !videoUrl) {
      notifications.show({
        title: 'Missing Video URL',
        message: 'Please enter video URL',
        color: 'red'
      })
      return
    }

    if (messageType === 'audio' && !audioUrl) {
      notifications.show({
        title: 'Missing Audio URL',
        message: 'Please enter audio URL',
        color: 'red'
      })
      return
    }

    if (messageType === 'location' && (!locationLat || !locationLon)) {
      notifications.show({
        title: 'Missing Location Data',
        message: 'Please enter latitude and longitude',
        color: 'red'
      })
      return
    }

    const account = testAccounts.find(acc => acc.id === selectedAccount)
    if (!account) {
      notifications.show({
        title: 'Account Not Found',
        message: 'Selected account not found',
        color: 'red'
      })
      return
    }

    if (account.status !== 'connected') {
      notifications.show({
        title: 'Account Not Connected',
        message: `Account status is "${account.status}". Only connected accounts can send messages.`,
        color: 'red'
      })
      return
    }

    setMessageSending(true)

    try {
      // Format phone number for WhatsApp (ensure it includes @s.whatsapp.net)
      let formattedRecipient = recipientNumber
      
      if (!recipientNumber.includes('@')) {
        // Remove all non-digit characters
        let cleanNumber = recipientNumber.replace(/\D/g, '')
        
        // Handle Indian numbers - ensure they start with 91 if they don't have country code
        if (cleanNumber.length === 10 && cleanNumber.match(/^[6-9]/)) {
          // Indian mobile number without country code
          cleanNumber = '91' + cleanNumber
        }
        
        formattedRecipient = `${cleanNumber}@s.whatsapp.net`
      }

      // Build message object based on type
      let messageObject: any = {}

      switch (messageType) {
        case 'text':
          messageObject = {
            text: messageText
          }
          break

        case 'image':
          messageObject = {
            image: {
              url: imageUrl,
              caption: imageCaption || undefined
            }
          }
          break

        case 'document':
          messageObject = {
            document: {
              url: documentUrl,
              filename: documentFilename,
              caption: documentCaption || undefined
            }
          }
          break

        case 'video':
          messageObject = {
            video: {
              url: videoUrl,
              caption: videoCaption || undefined
            }
          }
          break

        case 'audio':
          messageObject = {
            audio: {
              url: audioUrl
            }
          }
          break

        case 'location':
          messageObject = {
            location: {
              latitude: parseFloat(locationLat),
              longitude: parseFloat(locationLon),
              name: locationName || undefined,
              address: locationAddress || undefined
            }
          }
          break

        default:
          throw new Error('Invalid message type')
      }

      const response = await fetch(`http://localhost:3005/api/accounts/${selectedAccount}/send-message`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          to: formattedRecipient,
          message: messageObject
        })
      })

      const result = await response.json()

      if (result.success) {
        const messageTypeLabel = messageType === 'text' ? 'Text Message' : 
                               messageType === 'image' ? 'Image' :
                               messageType === 'document' ? 'Document' :
                               messageType === 'video' ? 'Video' :
                               messageType === 'audio' ? 'Audio' :
                               messageType === 'location' ? 'Location' : 'Message'

        notifications.show({
          title: `✅ ${messageTypeLabel} Sent!`,
          message: `${messageTypeLabel} sent successfully to ${recipientNumber}${result.data?.messageId ? ` (ID: ${result.data.messageId})` : ''}`,
          color: 'green',
          autoClose: 7000
        })
        
        // Clear form fields after successful send
        if (messageType === 'text') setMessageText('')
        if (messageType === 'image') {
          setImageUrl('')
          setImageCaption('')
        }
        if (messageType === 'document') {
          setDocumentUrl('')
          setDocumentFilename('')
          setDocumentCaption('')
        }
        if (messageType === 'video') {
          setVideoUrl('')
          setVideoCaption('')
        }
        if (messageType === 'audio') {
          setAudioUrl('')
        }
        if (messageType === 'location') {
          setLocationLat('')
          setLocationLon('')
          setLocationName('')
          setLocationAddress('')
        }
        
        // Log the result
        setTestResults(prev => ({
          ...prev,
          [`${messageType}_${Date.now()}`]: {
            success: true,
            data: result.data,
            timestamp: new Date().toISOString(),
            accountId: selectedAccount
          }
        }))
      } else {
        notifications.show({
          title: '❌ Message Failed',
          message: result.error || 'Failed to send message',
          color: 'red',
          autoClose: 8000
        })
        
        setTestResults(prev => ({
          ...prev,
          [`${messageType}_error_${Date.now()}`]: {
            success: false,
            error: result.error,
            timestamp: new Date().toISOString(),
            accountId: selectedAccount
          }
        }))
      }
    } catch (error) {
      notifications.show({
        title: '🚨 Network Error',
        message: `Failed to send message: ${error instanceof Error ? error.message : 'Unknown error'}`,
        color: 'red',
        autoClose: 8000
      })
      
      setTestResults(prev => ({
        ...prev,
        [`${messageType}_network_error_${Date.now()}`]: {
          success: false,
          error: error instanceof Error ? error.message : 'Network error',
          timestamp: new Date().toISOString()
        }
      }))
    } finally {
      setMessageSending(false)
    }
  }

  return (
    <Container size="xl" py="md">
        <Stack gap="lg">
        {/* Header */}
        <Group justify="space-between" align="center">
          <div>
            <Title order={1}>WhatsApp API Test Console</Title>
            <Text c="dimmed">Test and debug WhatsApp server integration (localhost:3005)</Text>
          </div>
          <Group>
            <Button
              variant="light"
              color="teal"
              leftSection={<IconRefresh size="1rem" />}
              onClick={() => {
                refreshAllAccounts()
                testAccountsList()
                notifications.show({
                  title: '🔄 Status Refreshed',
                  message: 'All account statuses updated',
                  color: 'teal',
                  autoClose: 2000
                })
              }}
            >
              Refresh Status
            </Button>
            <Button
              variant={autoRefresh ? 'filled' : 'light'}
              color={autoRefresh ? 'green' : 'blue'}
              leftSection={<IconRefresh size="1rem" />}
              onClick={() => setAutoRefresh(!autoRefresh)}
            >
              Auto Refresh: {autoRefresh ? 'ON' : 'OFF'}
            </Button>
          </Group>
        </Group>

        {/* Rate Limiting Warning */}
        <Alert icon={<IconBrandWhatsapp size="1rem" />} color="yellow" title="📱 Mobile Connection Tips">
          <Text size="sm">
            If QR codes aren't working on mobile:
          </Text>
          <Text size="xs" mt="xs">
            • <strong>Wait 15-30 seconds</strong> between connection attempts<br/>
            • <strong>Use only ONE QR code</strong> at a time<br/>  
            • If you get "can't add devices" error, <strong>wait 15+ minutes</strong><br/>
            • Try switching between WiFi and mobile data on phone<br/>
            • Ensure WhatsApp is updated to latest version
          </Text>
        </Alert>

        {/* Server Status */}
        <Card withBorder padding="lg">
          <Group justify="space-between" mb="md">
            <Title order={3}>Server Status</Title>
            <Button 
              leftSection={<IconRefresh size="1rem" />}
              onClick={testServerHealth}
              loading={loading}
              size="sm"
            >
              Refresh
            </Button>
          </Group>
          
          {serverStatus && (
            <Alert
              icon={serverStatus.success ? <IconCheck size="1rem" /> : <IconX size="1rem" />}
              color={serverStatus.success ? 'green' : 'red'}
            >
              <Group justify="space-between">
                <div>
                  <Text fw={500}>
                    {serverStatus.success 
                      ? `Server Healthy (Status: ${serverStatus.status})`
                      : `Server Error: ${serverStatus.error}`
                    }
                  </Text>
                  {serverStatus.data?.data && (
                    <Text size="sm" c="dimmed">
                      Version: {serverStatus.data.data.version} | 
                      Uptime: {Math.round(serverStatus.data.data.uptime / 1000)}s
                    </Text>
                  )}
                </div>
                <Badge color={serverStatus.success ? 'green' : 'red'}>
                  {serverStatus.success ? 'ONLINE' : 'OFFLINE'}
                </Badge>
              </Group>
            </Alert>
          )}
        </Card>

        <Tabs defaultValue="testing">
          <Tabs.List>
            <Tabs.Tab value="testing" leftSection={<IconPlayerPlay size="1rem" />}>
              API Testing
            </Tabs.Tab>
            <Tabs.Tab value="accounts" leftSection={<IconBrandWhatsapp size="1rem" />}>
              Test Accounts
            </Tabs.Tab>
            <Tabs.Tab value="messages" leftSection={<IconMessage size="1rem" />}>
              Message Testing
            </Tabs.Tab>
            <Tabs.Tab value="results" leftSection={<IconEye size="1rem" />}>
              Raw Results
            </Tabs.Tab>
          </Tabs.List>

          <Tabs.Panel value="testing" pt="lg">
            <Grid>
              <Grid.Col span={{ base: 12, md: 6 }}>
                <Card withBorder padding="lg">
                  <Title order={4} mb="md">Basic API Tests</Title>
                  <Stack gap="sm">
                    <Button
                      fullWidth
                      variant="light"
                      leftSection={<IconServer size="1rem" />}
                      onClick={testServerStats}
                    >
                      Test Server Statistics
                    </Button>
                    <Button
                      fullWidth
                      variant="light"
                      leftSection={<IconBrandWhatsapp size="1rem" />}
                      onClick={testAccountsList}
                    >
                      List All Accounts
                    </Button>
                  </Stack>
                </Card>
              </Grid.Col>
              
              <Grid.Col span={{ base: 12, md: 6 }}>
                <Card withBorder padding="lg">
                  <Title order={4} mb="md">Create Test Account</Title>
                  <Stack gap="sm">
                    <TextInput
                      placeholder="Enter test account name"
                      value={newAccountName}
                      onChange={(e) => setNewAccountName(e.target.value)}
                      onKeyDown={(e) => e.key === 'Enter' && createTestAccount()}
                    />
                    <Group gap="sm">
                      <Button
                        flex={1}
                        leftSection={<IconPlus size="1rem" />}
                        onClick={() => createTestAccount(false)}
                        disabled={!newAccountName.trim()}
                      >
                        Create Test Account
                      </Button>
                    </Group>
                    <Button
                      fullWidth
                      leftSection={<IconScan size="1rem" />}
                      onClick={() => createTestAccount(true)}
                      variant="gradient"
                      gradient={{ from: 'teal', to: 'lime', deg: 45 }}
                      disabled={!isClient}
                    >
                      🚀 Quick Connect (Auto QR)
                    </Button>
                  </Stack>
                </Card>
              </Grid.Col>
            </Grid>
          </Tabs.Panel>

          <Tabs.Panel value="accounts" pt="lg">
            <Stack gap="md">
              <Group justify="space-between">
                <Title order={4}>Test Accounts ({testAccounts.length})</Title>
                <Button
                  size="sm"
                  variant="light"
                  leftSection={<IconRefresh size="1rem" />}
                  onClick={refreshAllAccounts}
                  disabled={testAccounts.length === 0}
                >
                  Refresh All
                </Button>
              </Group>

              {testAccounts.length === 0 ? (
                <Alert icon={<IconBrandWhatsapp size="1rem" />} color="blue">
                  No test accounts created yet. Create one using the API Testing tab.
                </Alert>
              ) : (
                <Stack gap="sm">
                  {testAccounts.map((account) => (
                    <Card key={account.id} withBorder padding="md">
                      <Group justify="space-between" align="flex-start">
                        <div style={{ flex: 1 }}>
                          <Group gap="sm" mb="xs">
                            <Text fw={600} component="div">
                              {account.name}
                              {account.isAutoGenerated && (
                                <Badge variant="light" color="cyan" size="xs" ml="xs">
                                  Auto
                                </Badge>
                              )}
                              {account.isPersistent && (
                                <Badge variant="light" color="orange" size="xs" ml="xs">
                                  Persistent
                                </Badge>
                              )}
                            </Text>
                            <Badge 
                              color={getStatusColor(account.status)} 
                              size="sm"
                              variant={account.status.toLowerCase() === 'connected' ? 'filled' : 'light'}
                              style={account.status.toLowerCase() === 'connected' ? { 
                                fontWeight: 'bold',
                                boxShadow: '0 0 8px rgba(34, 139, 34, 0.3)'
                              } : undefined}
                            >
                              {account.status.toLowerCase() === 'connected' ? '🟢 CONNECTED' : account.status.toUpperCase()}
                            </Badge>
                          </Group>
                          
                          <Stack gap={4}>
                            <Text size="xs" c="dimmed">
                              ID: {account.id}
                              <ActionIcon
                                size="xs"
                                variant="subtle"
                                onClick={() => copyToClipboard(account.id)}
                                ml={4}
                              >
                                <IconCopy size="0.7rem" />
                              </ActionIcon>
                            </Text>
                            <Text size="xs" c="dimmed">
                              Created: {isClient ? new Date(account.created).toLocaleString() : 'Loading...'}
                            </Text>
                            {account.lastTested && (
                              <Text size="xs" c="dimmed">
                                Last Tested: {isClient ? new Date(account.lastTested).toLocaleString() : 'Loading...'}
                              </Text>
                            )}
                            {account.deviceInfo && (
                              <Card withBorder padding="sm" style={{ backgroundColor: '#e8f5e8', marginTop: '8px' }}>
                                <Stack gap={4}>
                                  <Group gap="sm" justify="space-between">
                                    <Text size="xs" c="green" fw={600}>
                                      📱 Auto-Detected Device
                                    </Text>
                                    <Badge variant="light" color="green" size="xs">
                                      Connected
                                    </Badge>
                                  </Group>
                                  
                                  {account.deviceInfo.phoneNumber && (
                                    <Group gap="sm">
                                      <Text size="xs" fw={500} c="blue">
                                        📞 Phone: {account.deviceInfo.phoneNumber}
                                      </Text>
                                      <ActionIcon
                                        size="xs"
                                        variant="subtle"
                                        onClick={() => copyToClipboard(account.deviceInfo.phoneNumber!)}
                                      >
                                        <IconCopy size="0.6rem" />
                                      </ActionIcon>
                                    </Group>
                                  )}
                                  
                                  {account.deviceInfo.userName && (
                                    <Text size="xs" c="teal" fw={500}>
                                      👤 User: {account.deviceInfo.userName}
                                    </Text>
                                  )}
                                  
                                  {account.deviceInfo.platform && (
                                    <Text size="xs" c="purple">
                                      📱 Platform: {account.deviceInfo.platform}
                                    </Text>
                                  )}
                                  
                                  <Group gap="md">
                                    <Text size="xs" c="dimmed">
                                      Connected: {isClient ? new Date(account.deviceInfo.connectedAt!).toLocaleString() : 'Loading...'}
                                    </Text>
                                    {account.deviceInfo.lastSeen && (
                                      <Text size="xs" c="dimmed">
                                        Last Seen: {isClient ? new Date(account.deviceInfo.lastSeen).toLocaleString() : 'Loading...'}
                                      </Text>
                                    )}
                                  </Group>
                                  
                                  {account.deviceInfo.deviceId && (
                                    <Text size="xs" c="dimmed" style={{ fontFamily: 'monospace' }}>
                                      Device ID: {account.deviceInfo.deviceId.length > 40 ? 
                                        `${account.deviceInfo.deviceId.substring(0, 40)}...` : 
                                        account.deviceInfo.deviceId}
                                    </Text>
                                  )}
                                </Stack>
                              </Card>
                            )}
                          </Stack>

                          {/* QR Code Status and Generation */}
                          <div style={{ marginTop: '15px' }}>
                            {account.qrCode ? (
                              <Card withBorder padding="md" style={{ backgroundColor: '#f8f9fa' }}>
                                <Stack align="center" gap="md">
                                  <Group gap="sm" justify="center">
                                    <IconBrandWhatsapp size={20} color="#25d366" />
                                    <Text size="sm" fw={500} c="#25d366">Ready to Connect</Text>
                                    {account.qrAge !== undefined && (
                                      <Badge 
                                        color={getQRFreshness(account.qrAge).color} 
                                        size="xs"
                                        variant="light"
                                      >
                                        {getQRFreshness(account.qrAge).label} - {formatQRAge(account.qrAge)}
                                      </Badge>
                                    )}
                                  </Group>
                                  
                                  <div style={{ 
                                    padding: '15px', 
                                    backgroundColor: 'white', 
                                    borderRadius: '8px',
                                    border: '1px solid #e9ecef'
                                  }}>
                                    <Image
                                      src={account.qrCode}
                                      alt="WhatsApp QR Code - Scan with your phone"
                                      width={200}
                                      height={200}
                                      style={{ display: 'block' }}
                                    />
                                  </div>
                                  
                                  <Stack gap="xs" align="center">
                                    <Text size="xs" fw={500} c="#495057">Scan with WhatsApp</Text>
                                    <Text size="xs" c="#6c757d" ta="center">
                                      1. Open WhatsApp on your phone<br/>
                                      2. Go to Menu → Linked Devices<br/>
                                      3. Tap "Link a Device" and scan
                                    </Text>
                                    <Button
                                      size="xs"
                                      variant="light"
                                      color="green"
                                      leftSection={<IconQrcode size="0.8rem" />}
                                      onClick={() => {
                                        setSelectedQRAccount(account)
                                        setQrModalOpen(true)
                                      }}
                                    >
                                      Show Large QR Code
                                    </Button>
                                  </Stack>
                                </Stack>
                              </Card>
                            ) : (
                              <Card withBorder padding="md" style={{ backgroundColor: '#fff5f5' }}>
                                <Stack align="center" gap="md">
                                  <Group gap="sm">
                                    <IconQrcode size={20} color="#868e96" />
                                    <Text size="sm" fw={500} c="dimmed">No QR Code Generated</Text>
                                  </Group>
                                  <Text size="xs" c="dimmed" ta="center">
                                    Click "Quick Generate" to create a fresh QR code for mobile scanning
                                  </Text>
                                  <Button
                                    size="xs"
                                    leftSection={<IconScan size="0.8rem" />}
                                    onClick={() => getQRCode(account.id)}
                                    variant="light"
                                    color="blue"
                                  >
                                    🚀 Quick Generate QR
                                  </Button>
                                </Stack>
                              </Card>
                            )}
                          </div>
                        </div>

                        <Group gap="xs">
                          <ActionIcon
                            variant="light"
                            color="blue"
                            onClick={() => getAccountStatus(account.id)}
                            title="Check Status"
                          >
                            <IconRefresh size="1rem" />
                          </ActionIcon>
                          <ActionIcon
                            variant="light"
                            color="green"
                            onClick={() => {
                              if (account.qrCode) {
                                setSelectedQRAccount(account)
                                setQrModalOpen(true)
                              } else {
                                getQRCode(account.id, true) // Generate with modal
                              }
                            }}
                            title={account.qrCode ? "Show QR Modal" : "Generate QR with Modal"}
                          >
                            <IconQrcode size="1rem" />
                          </ActionIcon>
                          <ActionIcon
                            variant="light"
                            color="blue"
                            onClick={() => getQRCode(account.id)} // Generate inline only
                            title="Generate Fresh QR Code"
                          >
                            <IconRefresh size="1rem" />
                          </ActionIcon>
                          {account.isPersistent ? (
                            <Group gap="xs">
                              <ActionIcon
                                variant="light"
                                color="orange"
                                onClick={() => disconnectAccount(account.id, false)}
                                title="Disconnect (Keep Session)"
                              >
                                <IconWifiOff size="1rem" />
                              </ActionIcon>
                              <ActionIcon
                                variant="light"
                                color="red"
                                onClick={() => disconnectAccount(account.id, true)}
                                title="Remove Completely"
                              >
                                <IconTrash size="1rem" />
                              </ActionIcon>
                            </Group>
                          ) : (
                            <ActionIcon
                              variant="light"
                              color="red"
                              onClick={() => disconnectAccount(account.id)}
                              title="Disconnect & Remove"
                            >
                              <IconTrash size="1rem" />
                            </ActionIcon>
                          )}
                        </Group>
                      </Group>
                    </Card>
                  ))}
                </Stack>
              )}
            </Stack>
          </Tabs.Panel>

          <Tabs.Panel value="messages" pt="lg">
            <Stack gap="lg">
              <Group justify="space-between">
                <Title order={4}>Message & Attachment Testing</Title>
                <Text size="sm" c="dimmed">
                  Send text messages, images, documents, videos, audio, and locations
                </Text>
              </Group>

              <Grid>
                <Grid.Col span={{ base: 12, md: 8 }}>
                  <Card withBorder padding="lg">
                    <Title order={5} mb="md">Send Test Message</Title>
                    <Stack gap="md">
                      <Select
                        label="Select Connected Account"
                        placeholder="Choose an account to send from"
                        data={testAccounts
                          .filter(acc => acc.status === 'connected')
                          .map(acc => ({
                            value: acc.id,
                            label: `${acc.name}${acc.deviceInfo?.phoneNumber ? ` (${acc.deviceInfo.phoneNumber})` : ''}`
                          }))}
                        value={selectedAccount}
                        onChange={(value) => setSelectedAccount(value || '')}
                        leftSection={<IconBrandWhatsapp size="1rem" color="#25d366" />}
                      />

                      <TextInput
                        label="Recipient Phone Number"
                        placeholder="e.g., 8983063144 (designated test number)"
                        value={recipientNumber}
                        onChange={(e) => setRecipientNumber(e.target.value)}
                        leftSection={<IconPhone size="1rem" />}
                        description="Use 8983063144 for testing to avoid sending messages to unknown numbers"
                      />

                      <Select
                        label="Message Type"
                        placeholder="Select message type"
                        data={[
                          { value: 'text', label: '📝 Text Message' },
                          { value: 'image', label: '📸 Image Attachment' },
                          { value: 'document', label: '📄 Document Attachment' },
                          { value: 'video', label: '🎥 Video Attachment' },
                          { value: 'audio', label: '🔊 Audio Attachment' },
                          { value: 'location', label: '📍 Location Sharing' }
                        ]}
                        value={messageType}
                        onChange={(value) => setMessageType(value || 'text')}
                        leftSection={<IconMessage size="1rem" />}
                      />

                      {/* Text Message Fields */}
                      {messageType === 'text' && (
                        <Textarea
                          label="Message Text"
                          placeholder="Enter your test message here..."
                          value={messageText}
                          onChange={(e) => setMessageText(e.target.value)}
                          minRows={3}
                          maxRows={6}
                          autosize
                          leftSection={<IconMessage size="1rem" />}
                        />
                      )}

                      {/* Image Attachment Fields */}
                      {messageType === 'image' && (
                        <Stack gap="sm">
                          <TextInput
                            label="Image URL"
                            placeholder="https://example.com/image.jpg"
                            value={imageUrl}
                            onChange={(e) => setImageUrl(e.target.value)}
                            leftSection={<IconPhoto size="1rem" />}
                            description="Enter a valid image URL (JPG, PNG, GIF)"
                          />
                          <Textarea
                            label="Image Caption (Optional)"
                            placeholder="Enter caption for the image..."
                            value={imageCaption}
                            onChange={(e) => setImageCaption(e.target.value)}
                            minRows={2}
                            maxRows={4}
                            autosize
                          />
                        </Stack>
                      )}

                      {/* Document Attachment Fields */}
                      {messageType === 'document' && (
                        <Stack gap="sm">
                          <TextInput
                            label="Document URL"
                            placeholder="https://example.com/document.pdf"
                            value={documentUrl}
                            onChange={(e) => setDocumentUrl(e.target.value)}
                            leftSection={<IconFile size="1rem" />}
                            description="Enter a valid document URL (PDF, DOC, TXT, etc.)"
                          />
                          <TextInput
                            label="Filename"
                            placeholder="document.pdf"
                            value={documentFilename}
                            onChange={(e) => setDocumentFilename(e.target.value)}
                            leftSection={<IconFile size="1rem" />}
                            description="Filename to display in WhatsApp"
                          />
                          <Textarea
                            label="Document Caption (Optional)"
                            placeholder="Enter caption for the document..."
                            value={documentCaption}
                            onChange={(e) => setDocumentCaption(e.target.value)}
                            minRows={2}
                            maxRows={4}
                            autosize
                          />
                        </Stack>
                      )}

                      {/* Video Attachment Fields */}
                      {messageType === 'video' && (
                        <Stack gap="sm">
                          <TextInput
                            label="Video URL"
                            placeholder="https://example.com/video.mp4"
                            value={videoUrl}
                            onChange={(e) => setVideoUrl(e.target.value)}
                            leftSection={<IconVideo size="1rem" />}
                            description="Enter a valid video URL (MP4, AVI, MOV, etc.)"
                          />
                          <Textarea
                            label="Video Caption (Optional)"
                            placeholder="Enter caption for the video..."
                            value={videoCaption}
                            onChange={(e) => setVideoCaption(e.target.value)}
                            minRows={2}
                            maxRows={4}
                            autosize
                          />
                        </Stack>
                      )}

                      {/* Audio Attachment Fields */}
                      {messageType === 'audio' && (
                        <TextInput
                          label="Audio URL"
                          placeholder="https://example.com/audio.mp3"
                          value={audioUrl}
                          onChange={(e) => setAudioUrl(e.target.value)}
                          leftSection={<IconMusic size="1rem" />}
                          description="Enter a valid audio URL (MP3, WAV, M4A, etc.)"
                        />
                      )}

                      {/* Location Sharing Fields */}
                      {messageType === 'location' && (
                        <Stack gap="sm">
                          <Group grow>
                            <TextInput
                              label="Latitude"
                              placeholder="19.0760"
                              value={locationLat}
                              onChange={(e) => setLocationLat(e.target.value)}
                              leftSection={<IconMapPin size="1rem" />}
                              description="Latitude coordinate"
                            />
                            <TextInput
                              label="Longitude"
                              placeholder="72.8777"
                              value={locationLon}
                              onChange={(e) => setLocationLon(e.target.value)}
                              leftSection={<IconMapPin size="1rem" />}
                              description="Longitude coordinate"
                            />
                          </Group>
                          <TextInput
                            label="Location Name (Optional)"
                            placeholder="Mumbai, Maharashtra"
                            value={locationName}
                            onChange={(e) => setLocationName(e.target.value)}
                            leftSection={<IconMapPin size="1rem" />}
                          />
                          <TextInput
                            label="Address (Optional)"
                            placeholder="Mumbai, Maharashtra, India"
                            value={locationAddress}
                            onChange={(e) => setLocationAddress(e.target.value)}
                            leftSection={<IconMapPin size="1rem" />}
                          />
                        </Stack>
                      )}

                      <Button
                        fullWidth
                        leftSection={<IconSend size="1rem" />}
                        onClick={sendTestMessage}
                        loading={messageSending}
                        disabled={!selectedAccount || !recipientNumber}
                        size="md"
                        variant="gradient"
                        gradient={{ from: 'teal', to: 'green', deg: 45 }}
                      >
                        {messageSending ? 'Sending...' : 
                         messageType === 'text' ? 'Send Text Message' :
                         messageType === 'image' ? 'Send Image' :
                         messageType === 'document' ? 'Send Document' :
                         messageType === 'video' ? 'Send Video' :
                         messageType === 'audio' ? 'Send Audio' :
                         messageType === 'location' ? 'Share Location' : 'Send Message'}
                      </Button>
                    </Stack>
                  </Card>
                </Grid.Col>

                <Grid.Col span={{ base: 12, md: 4 }}>
                  <Card withBorder padding="md" style={{ backgroundColor: '#f8f9fa' }}>
                    <Title order={6} mb="sm">📱 Message & Attachment Guide</Title>
                    <Stack gap={4}>
                      <Text size="xs">
                        • <strong>Account Status:</strong> Only connected accounts can send messages
                      </Text>
                      <Text size="xs">
                        • <strong>Phone Format:</strong> 10-digit Indian numbers auto-add +91 prefix
                      </Text>
                      <Text size="xs">
                        • <strong>Test Number:</strong> Use 8983063144 to avoid sending to unknown contacts
                      </Text>
                      <Text size="xs">
                        • <strong>Images:</strong> JPG, PNG, GIF URLs. Max caption ~1024 chars
                      </Text>
                      <Text size="xs">
                        • <strong>Documents:</strong> PDF, DOC, TXT URLs. Specify filename
                      </Text>
                      <Text size="xs">
                        • <strong>Videos:</strong> MP4, AVI, MOV URLs. May take time to process
                      </Text>
                      <Text size="xs">
                        • <strong>Audio:</strong> MP3, WAV, M4A URLs. Appears as voice note
                      </Text>
                      <Text size="xs">
                        • <strong>Location:</strong> Decimal coordinates. Name/address optional
                      </Text>
                      <Text size="xs">
                        • <strong>Rate Limits:</strong> Wait between messages to avoid limits
                      </Text>
                      <Text size="xs">
                        • <strong>Results:</strong> Check Raw Results tab for detailed responses
                      </Text>
                    </Stack>
                  </Card>

                  {/* Attachment Status Card */}
                  <Card withBorder padding="md" mt="md" style={{ backgroundColor: '#e8f5e8' }}>
                    <Title order={6} mb="sm">✅ Attachment Support Status</Title>
                    <Stack gap={2}>
                      <Group gap="xs">
                        <IconPhoto size="0.8rem" color="green" />
                        <Text size="xs" c="green">Image attachments: Working</Text>
                      </Group>
                      <Group gap="xs">
                        <IconFile size="0.8rem" color="green" />
                        <Text size="xs" c="green">Document attachments: Working</Text>
                      </Group>
                      <Group gap="xs">
                        <IconVideo size="0.8rem" color="green" />
                        <Text size="xs" c="green">Video attachments: Working</Text>
                      </Group>
                      <Group gap="xs">
                        <IconMusic size="0.8rem" color="green" />
                        <Text size="xs" c="green">Audio attachments: Working</Text>
                      </Group>
                      <Group gap="xs">
                        <IconMapPin size="0.8rem" color="green" />
                        <Text size="xs" c="green">Location sharing: Working</Text>
                      </Group>
                      <Group gap="xs">
                        <IconMessage size="0.8rem" color="green" />
                        <Text size="xs" c="green">Text messages: Working</Text>
                      </Group>
                    </Stack>
                  </Card>

                  {testAccounts.filter(acc => acc.status === 'connected').length === 0 && (
                    <Alert icon={<IconBrandWhatsapp size="1rem" />} color="yellow" mt="md">
                      <Text size="sm" fw={500}>No Connected Accounts</Text>
                      <Text size="xs">
                        Connect at least one account from the "Test Accounts" tab to send messages.
                      </Text>
                    </Alert>
                  )}
                </Grid.Col>
              </Grid>

              {/* Quick Templates */}
              <Card withBorder padding="md">
                <Title order={6} mb="sm">🚀 Quick Templates & Examples</Title>
                
                {/* Text Message Templates */}
                <Stack gap="sm">
                  <Text size="sm" fw={500}>📝 Text Message Templates:</Text>
                  <Group gap="xs">
                    <Button
                      size="xs"
                      variant="light"
                      onClick={() => {
                        setMessageType('text')
                        setMessageText('Hello! This is a test message from WhatsApp API.')
                      }}
                      disabled={messageSending}
                    >
                      Basic Test
                    </Button>
                    <Button
                      size="xs"
                      variant="light"
                      onClick={() => {
                        setMessageType('text')
                        setMessageText('🤖 Automated message test\n\nTimestamp: ' + new Date().toLocaleString())
                      }}
                      disabled={messageSending}
                    >
                      With Emoji & Time
                    </Button>
                    <Button
                      size="xs"
                      variant="light"
                      onClick={() => {
                        setMessageType('text')
                        setMessageText('Testing special characters: áéíóú ñÑ üÜ 中文 🌟🎉💡')
                      }}
                      disabled={messageSending}
                    >
                      Unicode Test
                    </Button>
                  </Group>

                  {/* Attachment Templates */}
                  <Text size="sm" fw={500}>📎 Attachment Templates:</Text>
                  <Group gap="xs">
                    <Button
                      size="xs"
                      variant="light"
                      color="blue"
                      leftSection={<IconPhoto size="0.8rem" />}
                      onClick={() => {
                        setMessageType('image')
                        setImageUrl('https://picsum.photos/400/300?random=' + Date.now())
                        setImageCaption('📸 Test Image from Picsum\n\nThis is a random test image!')
                      }}
                      disabled={messageSending}
                    >
                      Image Sample
                    </Button>
                    <Button
                      size="xs"
                      variant="light"
                      color="green"
                      leftSection={<IconFile size="0.8rem" />}
                      onClick={() => {
                        setMessageType('document')
                        setDocumentUrl('https://www.learningcontainer.com/wp-content/uploads/2019/09/sample-pdf-file.pdf')
                        setDocumentFilename('Sample_Test_Document.pdf')
                        setDocumentCaption('📄 Test PDF Document\n\nThis is a sample PDF for testing WhatsApp document sharing!')
                      }}
                      disabled={messageSending}
                    >
                      PDF Sample
                    </Button>
                    <Button
                      size="xs"
                      variant="light"
                      color="grape"
                      leftSection={<IconVideo size="0.8rem" />}
                      onClick={() => {
                        setMessageType('video')
                        setVideoUrl('https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4')
                        setVideoCaption('🎥 Big Buck Bunny Video\n\nThis is a sample video for testing WhatsApp video sharing!')
                      }}
                      disabled={messageSending}
                    >
                      Video Sample
                    </Button>
                    <Button
                      size="xs"
                      variant="light"
                      color="orange"
                      leftSection={<IconMusic size="0.8rem" />}
                      onClick={() => {
                        setMessageType('audio')
                        setAudioUrl('https://www.learningcontainer.com/wp-content/uploads/2020/02/Kalimba.mp3')
                      }}
                      disabled={messageSending}
                    >
                      Audio Sample
                    </Button>
                    <Button
                      size="xs"
                      variant="light"
                      color="teal"
                      leftSection={<IconMapPin size="0.8rem" />}
                      onClick={() => {
                        setMessageType('location')
                        setLocationLat('19.0760')
                        setLocationLon('72.8777')
                        setLocationName('Mumbai, Maharashtra')
                        setLocationAddress('Mumbai, Maharashtra, India')
                      }}
                      disabled={messageSending}
                    >
                      Mumbai Location
                    </Button>
                  </Group>

                  <Group gap="xs">
                    <Button
                      size="xs"
                      variant="light"
                      color="red"
                      onClick={() => {
                        // Clear all fields
                        setMessageText('')
                        setImageUrl('')
                        setImageCaption('')
                        setDocumentUrl('')
                        setDocumentFilename('')
                        setDocumentCaption('')
                        setVideoUrl('')
                        setVideoCaption('')
                        setAudioUrl('')
                        setLocationLat('')
                        setLocationLon('')
                        setLocationName('')
                        setLocationAddress('')
                        setMessageType('text')
                      }}
                      disabled={messageSending}
                    >
                      Clear All Fields
                    </Button>
                  </Group>
                </Stack>
              </Card>
            </Stack>
          </Tabs.Panel>

          <Tabs.Panel value="results" pt="lg">
            <Card withBorder padding="lg">
              <Title order={4} mb="md">Raw API Results</Title>
              <ScrollArea h={400}>
                <Stack gap="sm">
                  {Object.entries(testResults).map(([key, result]) => (
                    <div key={key}>
                      <Group gap="xs" mb="xs">
                        <Badge color={result.success ? 'green' : 'red'} size="sm">
                          {key}
                        </Badge>
                        <Text size="xs" c="dimmed">
                          {isClient ? new Date(result.timestamp).toLocaleString() : 'Loading...'}
                        </Text>
                        <ActionIcon
                          size="xs"
                          variant="subtle"
                          onClick={() => copyToClipboard(JSON.stringify(result, null, 2))}
                        >
                          <IconCopy size="0.7rem" />
                        </ActionIcon>
                      </Group>
                      <Code block style={{ fontSize: '11px', maxHeight: '200px', overflow: 'auto' }}>
                        {JSON.stringify(result, null, 2)}
                      </Code>
                      <Divider my="sm" />
                    </div>
                  ))}
                  
                  {Object.keys(testResults).length === 0 && (
                    <Text c="dimmed" ta="center">
                      No test results yet. Run some API tests to see results here.
                    </Text>
                  )}
                </Stack>
              </ScrollArea>
            </Card>
          </Tabs.Panel>
        </Tabs>

        {/* WhatsApp-style QR Modal */}
        <WhatsAppQRModal
          opened={qrModalOpen}
          onClose={() => {
            setQrModalOpen(false)
            setSelectedQRAccount(null)
          }}
          qrCode={selectedQRAccount?.qrCode}
          accountName={selectedQRAccount?.name || 'Test Account'}
          serverName="Local WhatsApp Server (localhost:3005)"
          autoClose={true}
          countdownSeconds={1200}
        />
      </Stack>
    </Container>
  )
}